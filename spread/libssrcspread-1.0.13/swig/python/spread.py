# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.11
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3,0,0):
    new_instancemethod = lambda func, inst, cls: _spread.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_spread', [dirname(__file__)])
        except ImportError:
            import _spread
            return _spread
        if fp is not None:
            try:
                _mod = imp.load_module('_spread', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _spread = swig_import_helper()
    del swig_import_helper
else:
    import _spread
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


class Error(Exception):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Error, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Error, name)
    __repr__ = _swig_repr
    AcceptSession = _spread.Error_AcceptSession
    IllegalSpread = _spread.Error_IllegalSpread
    CouldNotConnect = _spread.Error_CouldNotConnect
    RejectQuota = _spread.Error_RejectQuota
    RejectNoName = _spread.Error_RejectNoName
    RejectIllegalName = _spread.Error_RejectIllegalName
    RejectNotUnique = _spread.Error_RejectNotUnique
    RejectVersion = _spread.Error_RejectVersion
    ConnectionClosed = _spread.Error_ConnectionClosed
    RejectAuth = _spread.Error_RejectAuth
    IllegalSession = _spread.Error_IllegalSession
    IllegalService = _spread.Error_IllegalService
    IllegalMessage = _spread.Error_IllegalMessage
    IllegalGroup = _spread.Error_IllegalGroup
    BufferTooShort = _spread.Error_BufferTooShort
    GroupsTooShort = _spread.Error_GroupsTooShort
    MessageTooLong = _spread.Error_MessageTooLong
    def __init__(self, *args): 
        _spread.Error_swiginit(self,_spread.new_Error(*args))
    __swig_destroy__ = _spread.delete_Error
Error.error = new_instancemethod(_spread.Error_error,None,Error)
Error._print = new_instancemethod(_spread.Error__print,None,Error)
Error_swigregister = _spread.Error_swigregister
Error_swigregister(Error)

class BufferSizeError(Error):
    __swig_setmethods__ = {}
    for _s in [Error]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BufferSizeError, name, value)
    __swig_getmethods__ = {}
    for _s in [Error]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BufferSizeError, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _spread.BufferSizeError_swiginit(self,_spread.new_BufferSizeError(*args))
    __swig_destroy__ = _spread.delete_BufferSizeError
BufferSizeError.size = new_instancemethod(_spread.BufferSizeError_size,None,BufferSizeError)
BufferSizeError_swigregister = _spread.BufferSizeError_swigregister
BufferSizeError_swigregister(BufferSizeError)

MaxSizePrivateName = _spread.MaxSizePrivateName
MaxSizeProcessName = _spread.MaxSizeProcessName
MaxSizeGroupName = _spread.MaxSizeGroupName
MinValidGroupNameChar = _spread.MinValidGroupNameChar
MaxValidGroupNameChar = _spread.MaxValidGroupNameChar
GroupNameSeparatorChar = _spread.GroupNameSeparatorChar

def split_private_group(*args):
  return _spread.split_private_group(*args)
split_private_group = _spread.split_private_group
class GroupList(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _spread.GroupList_swiginit(self,_spread.new_GroupList(*args))
    __swig_destroy__ = _spread.delete_GroupList
GroupList.add = new_instancemethod(_spread.GroupList_add,None,GroupList)
GroupList.group = new_instancemethod(_spread.GroupList_group,None,GroupList)
GroupList.copy = new_instancemethod(_spread.GroupList_copy,None,GroupList)
GroupList.clear = new_instancemethod(_spread.GroupList_clear,None,GroupList)
GroupList.size = new_instancemethod(_spread.GroupList_size,None,GroupList)
GroupList.__eq__ = new_instancemethod(_spread.GroupList___eq__,None,GroupList)
GroupList_swigregister = _spread.GroupList_swigregister
GroupList_swigregister(GroupList)

def __eq__(*args):
  return _spread.__eq__(*args)
__eq__ = _spread.__eq__

class BaseMessage(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Unreliable = _spread.BaseMessage_Unreliable
    Reliable = _spread.BaseMessage_Reliable
    FIFO = _spread.BaseMessage_FIFO
    Causal = _spread.BaseMessage_Causal
    Agreed = _spread.BaseMessage_Agreed
    Safe = _spread.BaseMessage_Safe
    SelfDiscard = _spread.BaseMessage_SelfDiscard
    DropReceive = _spread.BaseMessage_DropReceive
    UnreliableSelfDiscard = _spread.BaseMessage_UnreliableSelfDiscard
    ReliableSelfDiscard = _spread.BaseMessage_ReliableSelfDiscard
    FIFOSelfDiscard = _spread.BaseMessage_FIFOSelfDiscard
    CausalSelfDiscard = _spread.BaseMessage_CausalSelfDiscard
    AgreedSelfDiscard = _spread.BaseMessage_AgreedSelfDiscard
    SafeSelfDiscard = _spread.BaseMessage_SafeSelfDiscard
    def __init__(self, *args): 
        if self.__class__ == BaseMessage:
            _self = None
        else:
            _self = self
        _spread.BaseMessage_swiginit(self,_spread.new_BaseMessage(_self, *args))
    __swig_destroy__ = _spread.delete_BaseMessage
    def __disown__(self):
        self.this.disown()
        _spread.disown_BaseMessage(self)
        return weakref_proxy(self)
BaseMessage.size = new_instancemethod(_spread.BaseMessage_size,None,BaseMessage)
BaseMessage.clear = new_instancemethod(_spread.BaseMessage_clear,None,BaseMessage)
BaseMessage.set_service = new_instancemethod(_spread.BaseMessage_set_service,None,BaseMessage)
BaseMessage.service = new_instancemethod(_spread.BaseMessage_service,None,BaseMessage)
BaseMessage.set_type = new_instancemethod(_spread.BaseMessage_set_type,None,BaseMessage)
BaseMessage.type = new_instancemethod(_spread.BaseMessage_type,None,BaseMessage)
BaseMessage.set_sender = new_instancemethod(_spread.BaseMessage_set_sender,None,BaseMessage)
BaseMessage.sender = new_instancemethod(_spread.BaseMessage_sender,None,BaseMessage)
BaseMessage.set_endian_mismatch = new_instancemethod(_spread.BaseMessage_set_endian_mismatch,None,BaseMessage)
BaseMessage.endian_mismatch = new_instancemethod(_spread.BaseMessage_endian_mismatch,None,BaseMessage)
BaseMessage.set_agreed = new_instancemethod(_spread.BaseMessage_set_agreed,None,BaseMessage)
BaseMessage.is_agreed = new_instancemethod(_spread.BaseMessage_is_agreed,None,BaseMessage)
BaseMessage.set_causal = new_instancemethod(_spread.BaseMessage_set_causal,None,BaseMessage)
BaseMessage.is_causal = new_instancemethod(_spread.BaseMessage_is_causal,None,BaseMessage)
BaseMessage.set_fifo = new_instancemethod(_spread.BaseMessage_set_fifo,None,BaseMessage)
BaseMessage.is_fifo = new_instancemethod(_spread.BaseMessage_is_fifo,None,BaseMessage)
BaseMessage.set_reliable = new_instancemethod(_spread.BaseMessage_set_reliable,None,BaseMessage)
BaseMessage.is_reliable = new_instancemethod(_spread.BaseMessage_is_reliable,None,BaseMessage)
BaseMessage.set_unreliable = new_instancemethod(_spread.BaseMessage_set_unreliable,None,BaseMessage)
BaseMessage.is_unreliable = new_instancemethod(_spread.BaseMessage_is_unreliable,None,BaseMessage)
BaseMessage.set_safe = new_instancemethod(_spread.BaseMessage_set_safe,None,BaseMessage)
BaseMessage.is_safe = new_instancemethod(_spread.BaseMessage_is_safe,None,BaseMessage)
BaseMessage.set_self_discard = new_instancemethod(_spread.BaseMessage_set_self_discard,None,BaseMessage)
BaseMessage.is_self_discard = new_instancemethod(_spread.BaseMessage_is_self_discard,None,BaseMessage)
BaseMessage.is_regular = new_instancemethod(_spread.BaseMessage_is_regular,None,BaseMessage)
BaseMessage.is_membership = new_instancemethod(_spread.BaseMessage_is_membership,None,BaseMessage)
BaseMessage_swigregister = _spread.BaseMessage_swigregister
BaseMessage_swigregister(BaseMessage)

class Message(BaseMessage,):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    DefaultCapacity = _spread.Message_DefaultCapacity
    def __init__(self, *args): 
        if self.__class__ == Message:
            _self = None
        else:
            _self = self
        _spread.Message_swiginit(self,_spread.new_Message(_self, *args))
    __swig_destroy__ = _spread.delete_Message
    def __disown__(self):
        self.this.disown()
        _spread.disown_Message(self)
        return weakref_proxy(self)
Message.size = new_instancemethod(_spread.Message_size,None,Message)
Message.clear = new_instancemethod(_spread.Message_clear,None,Message)
Message.capacity = new_instancemethod(_spread.Message_capacity,None,Message)
Message.resize = new_instancemethod(_spread.Message_resize,None,Message)
Message.offset = new_instancemethod(_spread.Message_offset,None,Message)
Message.rewind = new_instancemethod(_spread.Message_rewind,None,Message)
Message.seek = new_instancemethod(_spread.Message_seek,None,Message)
Message.readn = new_instancemethod(_spread.Message_readn,None,Message)
Message.writen = new_instancemethod(_spread.Message_writen,None,Message)
Message.write = new_instancemethod(_spread.Message_write,None,Message)
Message.read = new_instancemethod(_spread.Message_read,None,Message)
Message_swigregister = _spread.Message_swigregister
Message_swigregister(Message)

class ScatterMessage(BaseMessage):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    MaxScatterElements = _spread.ScatterMessage_MaxScatterElements
    def __init__(self, *args): 
        if self.__class__ == ScatterMessage:
            _self = None
        else:
            _self = self
        _spread.ScatterMessage_swiginit(self,_spread.new_ScatterMessage(_self, *args))
    __swig_destroy__ = _spread.delete_ScatterMessage
    def __disown__(self):
        self.this.disown()
        _spread.disown_ScatterMessage(self)
        return weakref_proxy(self)
ScatterMessage.size = new_instancemethod(_spread.ScatterMessage_size,None,ScatterMessage)
ScatterMessage.clear = new_instancemethod(_spread.ScatterMessage_clear,None,ScatterMessage)
ScatterMessage.count_message_parts = new_instancemethod(_spread.ScatterMessage_count_message_parts,None,ScatterMessage)
ScatterMessage.count_message_objects = new_instancemethod(_spread.ScatterMessage_count_message_objects,None,ScatterMessage)
ScatterMessage.add = new_instancemethod(_spread.ScatterMessage_add,None,ScatterMessage)
ScatterMessage_swigregister = _spread.ScatterMessage_swigregister
ScatterMessage_swigregister(ScatterMessage)

class Timeout(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _spread.Timeout_swiginit(self,_spread.new_Timeout(*args))
    __swig_destroy__ = _spread.delete_Timeout
Timeout_swigregister = _spread.Timeout_swigregister
Timeout_swigregister(Timeout)

class Mailbox(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Low = _spread.Mailbox_Low
    Medium = _spread.Mailbox_Medium
    High = _spread.Mailbox_High
    __swig_destroy__ = _spread.delete_Mailbox
    def __init__(self, *args): 
        _spread.Mailbox_swiginit(self,_spread.new_Mailbox(*args))
Mailbox.connection = new_instancemethod(_spread.Mailbox_connection,None,Mailbox)
Mailbox.name = new_instancemethod(_spread.Mailbox_name,None,Mailbox)
Mailbox.descriptor = new_instancemethod(_spread.Mailbox_descriptor,None,Mailbox)
Mailbox.private_group = new_instancemethod(_spread.Mailbox_private_group,None,Mailbox)
Mailbox.group_membership = new_instancemethod(_spread.Mailbox_group_membership,None,Mailbox)
Mailbox.set_drop_receive = new_instancemethod(_spread.Mailbox_set_drop_receive,None,Mailbox)
Mailbox.drop_receive = new_instancemethod(_spread.Mailbox_drop_receive,None,Mailbox)
Mailbox.join = new_instancemethod(_spread.Mailbox_join,None,Mailbox)
Mailbox.leave = new_instancemethod(_spread.Mailbox_leave,None,Mailbox)
Mailbox.killed = new_instancemethod(_spread.Mailbox_killed,None,Mailbox)
Mailbox.poll = new_instancemethod(_spread.Mailbox_poll,None,Mailbox)
Mailbox.add_message_part = new_instancemethod(_spread.Mailbox_add_message_part,None,Mailbox)
Mailbox.add_group = new_instancemethod(_spread.Mailbox_add_group,None,Mailbox)
Mailbox.add_groups = new_instancemethod(_spread.Mailbox_add_groups,None,Mailbox)
Mailbox.group = new_instancemethod(_spread.Mailbox_group,None,Mailbox)
Mailbox.copy_groups = new_instancemethod(_spread.Mailbox_copy_groups,None,Mailbox)
Mailbox.count_groups = new_instancemethod(_spread.Mailbox_count_groups,None,Mailbox)
Mailbox.clear_groups = new_instancemethod(_spread.Mailbox_clear_groups,None,Mailbox)
Mailbox.count_message_parts = new_instancemethod(_spread.Mailbox_count_message_parts,None,Mailbox)
Mailbox.clear_message_parts = new_instancemethod(_spread.Mailbox_clear_message_parts,None,Mailbox)
Mailbox.send = new_instancemethod(_spread.Mailbox_send,None,Mailbox)
Mailbox.receive = new_instancemethod(_spread.Mailbox_receive,None,Mailbox)
Mailbox_swigregister = _spread.Mailbox_swigregister
Mailbox_swigregister(Mailbox)
cvar = _spread.cvar
Mailbox.ZeroTimeout = _spread.cvar.Mailbox_ZeroTimeout



