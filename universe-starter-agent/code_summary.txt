## a3c.py:
Handle the multi-process situation. Learner uses VNC to communicate with actor
# Changes: use multiple machines instead of multiple processes. We will use our own network code instead of VNC.
Send dW and dB with UDP multicast instead of parameter server.

## env.py:
environment setup code
# Changes: none


## model.py:
Tensorflow model + training code
# Changes: none


## train.py:
Parse cmd args, and a script that uses tmux to run multiple processes on a single machine
# Changes: write our own script to run one instance on a single machine


## worker.py:
Parse cmd args, and a script that runs a worker instance
# Changes: change the script to fit our need



## Commands to run the code without invoking tmux:
CUDA_VISIBLE_DEVICES= /usr/bin/python worker.py --log-dir /tmp/neonrace --env-id flashgames.NeonRace-v0 --num-workers <n> --job-name ps
CUDA_VISIBLE_DEVICES= /usr/bin/python worker.py --log-dir /tmp/neonrace --env-id flashgames.NeonRace-v0 --num-workers <n> --job-name worker --task <k \in \mathbb{Z}_n> --remotes 1

# modified to our taste:
CUDA_VISIBLE_DEVICES= python run.py --log-dir /tmp/neonrace --env-id flashgames.NeonRace-v0 --num-workers <n> --task <k \in \mathbb{Z}_n> --remotes 1
CUDA_VISIBLE_DEVICES= python run.py --log-dir /tmp/neonrace --env-id flashgames.NeonRace-v0 --num-workers 1 --task 0 --remotes 1